{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Homework Assignment for Class 1 uses two datasets, which are read in to this notebook by the next three cells. The documentation explaining the data sets is contained in the data folder of the directory. Then are:\n",
    "\n",
    "1. Potential power generation by renewables for each of the 50 US states.\n",
    "2. A time seried of Dow Jones Industrial Average closing prices from 1/2/2011 to 8/7/2018 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>urbanUtilityScalePV_GWh</th>\n",
       "      <th>urbanUtilityScalePV_GW</th>\n",
       "      <th>urbanUtilityScalePV_km2</th>\n",
       "      <th>ruralUtilityScalePV_GWh</th>\n",
       "      <th>ruralUtilityScalePV_GW</th>\n",
       "      <th>ruralUtilityScalePV_km2</th>\n",
       "      <th>rooftopPV_GWh</th>\n",
       "      <th>rooftopPV_GW</th>\n",
       "      <th>CSP_GWh</th>\n",
       "      <th>...</th>\n",
       "      <th>biopowerGaseous_GWh</th>\n",
       "      <th>biopowerGaseous_GW</th>\n",
       "      <th>biopowerGaseous_Tonnes-CH4</th>\n",
       "      <th>geothermalHydrothermal_GWh</th>\n",
       "      <th>geothermalHydrothermal_GW</th>\n",
       "      <th>EGSGeothermal_GWh</th>\n",
       "      <th>EGSGeothermal_GW</th>\n",
       "      <th>hydropower_GWh</th>\n",
       "      <th>hydropower_GW</th>\n",
       "      <th>hydropower_countOfSites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>35850</td>\n",
       "      <td>20</td>\n",
       "      <td>426</td>\n",
       "      <td>3706838</td>\n",
       "      <td>2114</td>\n",
       "      <td>44058</td>\n",
       "      <td>15475.0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1533</td>\n",
       "      <td>0</td>\n",
       "      <td>326186</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>535489.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>4102</td>\n",
       "      <td>0</td>\n",
       "      <td>2435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>166</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8282976</td>\n",
       "      <td>9005</td>\n",
       "      <td>187608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>13156</td>\n",
       "      <td>15437</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23675</td>\n",
       "      <td>5</td>\n",
       "      <td>3053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>121305</td>\n",
       "      <td>52</td>\n",
       "      <td>1096</td>\n",
       "      <td>11867693</td>\n",
       "      <td>5147</td>\n",
       "      <td>107230</td>\n",
       "      <td>22736.0</td>\n",
       "      <td>14</td>\n",
       "      <td>12544333</td>\n",
       "      <td>...</td>\n",
       "      <td>837</td>\n",
       "      <td>0</td>\n",
       "      <td>178188</td>\n",
       "      <td>8329</td>\n",
       "      <td>1</td>\n",
       "      <td>1239147.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>1303</td>\n",
       "      <td>0</td>\n",
       "      <td>1958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>28960</td>\n",
       "      <td>15</td>\n",
       "      <td>332</td>\n",
       "      <td>4986388</td>\n",
       "      <td>2747</td>\n",
       "      <td>57239</td>\n",
       "      <td>8484.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1063</td>\n",
       "      <td>0</td>\n",
       "      <td>226178</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>628621.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>6093</td>\n",
       "      <td>1</td>\n",
       "      <td>3268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>246008</td>\n",
       "      <td>111</td>\n",
       "      <td>2320</td>\n",
       "      <td>8855917</td>\n",
       "      <td>4010</td>\n",
       "      <td>83549</td>\n",
       "      <td>106411.0</td>\n",
       "      <td>75</td>\n",
       "      <td>8490916</td>\n",
       "      <td>...</td>\n",
       "      <td>15510</td>\n",
       "      <td>1</td>\n",
       "      <td>3300211</td>\n",
       "      <td>130921</td>\n",
       "      <td>16</td>\n",
       "      <td>1344179.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>30023</td>\n",
       "      <td>6</td>\n",
       "      <td>9692</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        State  urbanUtilityScalePV_GWh  urbanUtilityScalePV_GW  \\\n",
       "0     Alabama                    35850                      20   \n",
       "1      Alaska                      166                       0   \n",
       "2     Arizona                   121305                      52   \n",
       "3    Arkansas                    28960                      15   \n",
       "4  California                   246008                     111   \n",
       "\n",
       "   urbanUtilityScalePV_km2  ruralUtilityScalePV_GWh  ruralUtilityScalePV_GW  \\\n",
       "0                      426                  3706838                    2114   \n",
       "1                        2                  8282976                    9005   \n",
       "2                     1096                 11867693                    5147   \n",
       "3                      332                  4986388                    2747   \n",
       "4                     2320                  8855917                    4010   \n",
       "\n",
       "   ruralUtilityScalePV_km2  rooftopPV_GWh  rooftopPV_GW   CSP_GWh  \\\n",
       "0                    44058        15475.0            12         0   \n",
       "1                   187608            NaN             1         0   \n",
       "2                   107230        22736.0            14  12544333   \n",
       "3                    57239         8484.0             6         0   \n",
       "4                    83549       106411.0            75   8490916   \n",
       "\n",
       "            ...             biopowerGaseous_GWh  biopowerGaseous_GW  \\\n",
       "0           ...                            1533                   0   \n",
       "1           ...                              61                   0   \n",
       "2           ...                             837                   0   \n",
       "3           ...                            1063                   0   \n",
       "4           ...                           15510                   1   \n",
       "\n",
       "   biopowerGaseous_Tonnes-CH4  geothermalHydrothermal_GWh  \\\n",
       "0                      326186                           0   \n",
       "1                       13156                       15437   \n",
       "2                      178188                        8329   \n",
       "3                      226178                           0   \n",
       "4                     3300211                      130921   \n",
       "\n",
       "   geothermalHydrothermal_GW  EGSGeothermal_GWh  EGSGeothermal_GW  \\\n",
       "0                          0           535489.0              67.0   \n",
       "1                          1                NaN               NaN   \n",
       "2                          1          1239147.0             157.0   \n",
       "3                          0           628621.0              79.0   \n",
       "4                         16          1344179.0             170.0   \n",
       "\n",
       "   hydropower_GWh  hydropower_GW  hydropower_countOfSites  \n",
       "0            4102              0                     2435  \n",
       "1           23675              5                     3053  \n",
       "2            1303              0                     1958  \n",
       "3            6093              1                     3268  \n",
       "4           30023              6                     9692  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "renewables = pd.read_csv(\"usretechnicalpotential.csv\") # the potential for renewable ower by state\n",
    "renewables.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <font color=red>WARNING: Date handling is tricky in any language, and _Python_ is no exception. I recommend that for time series, you convert any text dates or timestamps to a __pandas__ _DateTimeIndex_ for use as the timeseries index. If you don't, you won't necessarily have access to the various attributes and methods of DateTimeIndex dtypes.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['date' 'aapl_close' 'axp_close' 'ba_close' 'cat_close' 'csco_close'\n",
      " 'cvx_close' 'dwdp_close' 'dis_close' 'ge_close' 'gs_close' 'hd_close'\n",
      " 'ibm_close' 'intc_close' 'jnj_close' 'jpm_close' 'ko_close' 'mcd_close'\n",
      " 'mmm_close' 'mrk_close' 'msft_close' 'nke_close' 'pfe_close' 'pg_close'\n",
      " 'trv_close' 'unh_close' 'utx_close' 'v_close' 'vz_close' 'wmt_close'\n",
      " 'xom_close']\n",
      "\n",
      " ['aapl_close' 'axp_close' 'ba_close' 'cat_close' 'csco_close' 'cvx_close'\n",
      " 'dwdp_close' 'dis_close' 'ge_close' 'gs_close' 'hd_close' 'ibm_close'\n",
      " 'intc_close' 'jnj_close' 'jpm_close' 'ko_close' 'mcd_close' 'mmm_close'\n",
      " 'mrk_close' 'msft_close' 'nke_close' 'pfe_close' 'pg_close' 'trv_close'\n",
      " 'unh_close' 'utx_close' 'v_close' 'vz_close' 'wmt_close' 'xom_close']\n",
      "\n",
      "             aapl_close  axp_close   ba_close  cat_close  csco_close\n",
      "date                                                               \n",
      "2011-01-03   47.081429  43.400002  66.400002  94.150002   20.490000\n",
      "2011-01-04   47.327145  43.950001  66.940002  93.709999   20.520000\n",
      "2011-01-05   47.714287  45.040001  67.480003  94.519997   20.770000\n",
      "2011-01-06   47.675713  44.730000  68.800003  93.540001   20.950001\n",
      "2011-01-07   48.017143  44.360001  69.379997  93.730003   20.969999\n"
     ]
    }
   ],
   "source": [
    "# Read the database of Dow Jones Industrial stock closes from the csv file 'djia_close.csv'.\n",
    "djia_df = pd.read_csv(\"djia_close.csv\")\n",
    "# Ignore these commands for now: they convert dates to a pandas DateTimeIndex\n",
    "from datetime import datetime\n",
    "djia_df['date'] = pd.to_datetime([datetime.strptime(x, '%Y-%m-%d') for x in djia_df['date']])\n",
    "# Print the column values. The 0th column is 'date', and the DataFrame djia_df is not a TimeSeries type.\n",
    "print(djia_df.columns.values)\n",
    "# Set the 'date' column to be the index of djia_ts. This converts the DataFrame djia_df into a TimeSeries djia_ts.\n",
    "djia_ts = djia_df.set_index('date')\n",
    "# The 'date' column of 'djia_df' is removed and set as the index of 'djia_ts'.\n",
    "print(\"\\n\",djia_ts.columns.values)\n",
    "# Print the first 5 rows (using .head()) and the first 5 columns of 'djia_ts'.\n",
    "print(\"\\n\",djia_ts.iloc[0:5,0:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <font color=blue>Questions 1-10 for the _renewables_ DataFrame</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n"
     ]
    }
   ],
   "source": [
    "# Question 1 (1 point): Print a list of all States\n",
    "print(list(renewables['State']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State                         New Jersey\n",
      "urbanUtilityScalePV_GWh            44307\n",
      "urbanUtilityScalePV_GW                25\n",
      "urbanUtilityScalePV_km2              527\n",
      "ruralUtilityScalePV_GWh           439773\n",
      "ruralUtilityScalePV_GW               251\n",
      "ruralUtilityScalePV_km2             5231\n",
      "rooftopPV_GWh                      15767\n",
      "rooftopPV_GW                          13\n",
      "CSP_GWh                                0\n",
      "CSP_GW                                 0\n",
      "CSP_km2                                0\n",
      "onshoreWind_GWh                      317\n",
      "onshoreWind_GW                         0\n",
      "onshoreWind_km2                       26\n",
      "offshoreWind_GWh                  429807\n",
      "offshoreWind_GW                      101\n",
      "offshoreWind_km2                   20386\n",
      "biopowerSolid_GWh                   1212\n",
      "biopowerSolid_GW                       0\n",
      "biopowerSolid_BDT                1101910\n",
      "biopowerGaseous_GWh                 2310\n",
      "biopowerGaseous_GW                     0\n",
      "biopowerGaseous_Tonnes-CH4        491691\n",
      "geothermalHydrothermal_GWh             0\n",
      "geothermalHydrothermal_GW              0\n",
      "EGSGeothermal_GWh                  35230\n",
      "EGSGeothermal_GW                       4\n",
      "hydropower_GWh                       549\n",
      "hydropower_GW                          0\n",
      "hydropower_countOfSites              402\n",
      "Name: 30, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Question 2 (1 point). Use this cell with the iloc command to print the 30th row of 'renewables'. \n",
    "#             Warning: Do not confuse the Python index with the row number.\n",
    "print(renewables.iloc[30,:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      526\n",
      "1      102\n",
      "2     1196\n",
      "3      432\n",
      "4     2420\n",
      "5      499\n",
      "6      200\n",
      "7      289\n",
      "8      100\n",
      "9      930\n",
      "10     605\n",
      "11     134\n",
      "12     351\n",
      "13    1424\n",
      "14    1374\n",
      "15     424\n",
      "16     417\n",
      "17     438\n",
      "18     774\n",
      "19     140\n",
      "20     478\n",
      "21     328\n",
      "22     799\n",
      "23     519\n",
      "24     417\n",
      "25     476\n",
      "26     227\n",
      "27     241\n",
      "28     324\n",
      "29     148\n",
      "30     627\n",
      "31     745\n",
      "32     782\n",
      "33     889\n",
      "34     157\n",
      "35    1290\n",
      "36     633\n",
      "37     370\n",
      "38     854\n",
      "39     124\n",
      "40     497\n",
      "41     150\n",
      "42     695\n",
      "43    3313\n",
      "44     392\n",
      "45     122\n",
      "46     426\n",
      "47     502\n",
      "48     141\n",
      "49     827\n",
      "50     175\n",
      "Name: urbanUtilityScalePV_km2, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Question 3 (1 point): Add 100 to renewables column 'urbanUtilityScalePV_km2' and print that column only\n",
    "renewables[\"urbanUtilityScalePV_km2\"] += 100\n",
    "print(renewables[\"urbanUtilityScalePV_km2\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Alaska</th>\n",
       "      <th>Arizona</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>District of Columbia</th>\n",
       "      <th>Florida</th>\n",
       "      <th>...</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>Washington</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>urbanUtilityScalePV_GWh</th>\n",
       "      <td>35850</td>\n",
       "      <td>166</td>\n",
       "      <td>121305</td>\n",
       "      <td>28960</td>\n",
       "      <td>246008</td>\n",
       "      <td>43470</td>\n",
       "      <td>7716</td>\n",
       "      <td>14856</td>\n",
       "      <td>8</td>\n",
       "      <td>72787</td>\n",
       "      <td>...</td>\n",
       "      <td>4573</td>\n",
       "      <td>50243</td>\n",
       "      <td>294684</td>\n",
       "      <td>30492</td>\n",
       "      <td>1632</td>\n",
       "      <td>27451</td>\n",
       "      <td>33690</td>\n",
       "      <td>3023</td>\n",
       "      <td>54938</td>\n",
       "      <td>7232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urbanUtilityScalePV_GW</th>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>15</td>\n",
       "      <td>111</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>154</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>19</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urbanUtilityScalePV_km2</th>\n",
       "      <td>526</td>\n",
       "      <td>102</td>\n",
       "      <td>1196</td>\n",
       "      <td>432</td>\n",
       "      <td>2420</td>\n",
       "      <td>499</td>\n",
       "      <td>200</td>\n",
       "      <td>289</td>\n",
       "      <td>100</td>\n",
       "      <td>930</td>\n",
       "      <td>...</td>\n",
       "      <td>150</td>\n",
       "      <td>695</td>\n",
       "      <td>3313</td>\n",
       "      <td>392</td>\n",
       "      <td>122</td>\n",
       "      <td>426</td>\n",
       "      <td>502</td>\n",
       "      <td>141</td>\n",
       "      <td>827</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ruralUtilityScalePV_GWh</th>\n",
       "      <td>3706838</td>\n",
       "      <td>8282976</td>\n",
       "      <td>11867693</td>\n",
       "      <td>4986388</td>\n",
       "      <td>8855917</td>\n",
       "      <td>10238083</td>\n",
       "      <td>19627</td>\n",
       "      <td>272332</td>\n",
       "      <td>0</td>\n",
       "      <td>5137346</td>\n",
       "      <td>...</td>\n",
       "      <td>10008873</td>\n",
       "      <td>2225989</td>\n",
       "      <td>38993581</td>\n",
       "      <td>5184878</td>\n",
       "      <td>54727</td>\n",
       "      <td>1882467</td>\n",
       "      <td>1738150</td>\n",
       "      <td>52693</td>\n",
       "      <td>5042258</td>\n",
       "      <td>5727224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ruralUtilityScalePV_GW</th>\n",
       "      <td>2114</td>\n",
       "      <td>9005</td>\n",
       "      <td>5147</td>\n",
       "      <td>2747</td>\n",
       "      <td>4010</td>\n",
       "      <td>4514</td>\n",
       "      <td>12</td>\n",
       "      <td>167</td>\n",
       "      <td>0</td>\n",
       "      <td>2812</td>\n",
       "      <td>...</td>\n",
       "      <td>5344</td>\n",
       "      <td>1266</td>\n",
       "      <td>20411</td>\n",
       "      <td>2390</td>\n",
       "      <td>35</td>\n",
       "      <td>1074</td>\n",
       "      <td>996</td>\n",
       "      <td>35</td>\n",
       "      <td>3205</td>\n",
       "      <td>2854</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State                    Alabama   Alaska   Arizona Arkansas California  \\\n",
       "urbanUtilityScalePV_GWh    35850      166    121305    28960     246008   \n",
       "urbanUtilityScalePV_GW        20        0        52       15        111   \n",
       "urbanUtilityScalePV_km2      526      102      1196      432       2420   \n",
       "ruralUtilityScalePV_GWh  3706838  8282976  11867693  4986388    8855917   \n",
       "ruralUtilityScalePV_GW      2114     9005      5147     2747       4010   \n",
       "\n",
       "State                    Colorado Connecticut Delaware District of Columbia  \\\n",
       "urbanUtilityScalePV_GWh     43470        7716    14856                    8   \n",
       "urbanUtilityScalePV_GW         19           4        9                    0   \n",
       "urbanUtilityScalePV_km2       499         200      289                  100   \n",
       "ruralUtilityScalePV_GWh  10238083       19627   272332                    0   \n",
       "ruralUtilityScalePV_GW       4514          12      167                    0   \n",
       "\n",
       "State                    Florida   ...    South Dakota Tennessee     Texas  \\\n",
       "urbanUtilityScalePV_GWh    72787   ...            4573     50243    294684   \n",
       "urbanUtilityScalePV_GW        39   ...               2        28       154   \n",
       "urbanUtilityScalePV_km2      930   ...             150       695      3313   \n",
       "ruralUtilityScalePV_GWh  5137346   ...        10008873   2225989  38993581   \n",
       "ruralUtilityScalePV_GW      2812   ...            5344      1266     20411   \n",
       "\n",
       "State                       Utah Vermont Virginia Washington West Virginia  \\\n",
       "urbanUtilityScalePV_GWh    30492    1632    27451      33690          3023   \n",
       "urbanUtilityScalePV_GW        14       1       15         19             2   \n",
       "urbanUtilityScalePV_km2      392     122      426        502           141   \n",
       "ruralUtilityScalePV_GWh  5184878   54727  1882467    1738150         52693   \n",
       "ruralUtilityScalePV_GW      2390      35     1074        996            35   \n",
       "\n",
       "State                   Wisconsin  Wyoming  \n",
       "urbanUtilityScalePV_GWh     54938     7232  \n",
       "urbanUtilityScalePV_GW         34        3  \n",
       "urbanUtilityScalePV_km2       827      175  \n",
       "ruralUtilityScalePV_GWh   5042258  5727224  \n",
       "ruralUtilityScalePV_GW       3205     2854  \n",
       "\n",
       "[5 rows x 51 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 4 (1 point): Transpose the DataFrame, so that states appear as columns.\n",
    "renewables_transposed = renewables.T\n",
    "renewables_transposed.columns = renewables_transposed.iloc[0]\n",
    "\n",
    "\n",
    "renewables_transposed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(30, 51)\n"
     ]
    }
   ],
   "source": [
    "# Question 5 (1 point): What is the shape of the renewables DataFrame?\n",
    "print(renewables_transposed.shape)\n",
    "#print(renewables.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Alabama' 'Alaska' 'Arizona' 'Arkansas' 'California' 'Colorado'\n",
      " 'Connecticut' 'Delaware' 'District of Columbia' 'Florida' 'Georgia'\n",
      " 'Hawaii' 'Idaho' 'Illinois' 'Indiana' 'Iowa' 'Kansas' 'Kentucky'\n",
      " 'Louisiana' 'Maine' 'Maryland' 'Massachusetts' 'Michigan' 'Minnesota'\n",
      " 'Mississippi' 'Missouri' 'Montana' 'Nebraska' 'Nevada' 'New Hampshire'\n",
      " 'New Jersey' 'New Mexico' 'New York' 'North Carolina' 'North Dakota'\n",
      " 'Ohio' 'Oklahoma' 'Oregon' 'Pennsylvania' 'Rhode Island' 'South Carolina'\n",
      " 'South Dakota' 'Tennessee' 'Texas' 'Utah' 'Vermont' 'Virginia'\n",
      " 'Washington' 'West Virginia' 'Wisconsin' 'Wyoming']\n"
     ]
    }
   ],
   "source": [
    "# Question 6 (1 point): List the columns of renewables.\n",
    "print(renewables_transposed.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 51 entries, Alabama to Wyoming\n",
      "Data columns (total 3 columns):\n",
      "urbanUtilityScalePV_GWh    51 non-null int64\n",
      "urbanUtilityScalePV_GW     51 non-null int64\n",
      "urbanUtilityScalePV_km2    51 non-null int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "# Question 7 (1 point): Create a new DataFrame 'renewables_by_state' that has 'State' as an index.\n",
    "#                       Then display 'info' on the first three columns of this DataFrame.\n",
    "renewables_by_state = renewables.set_index(\"State\")\n",
    "renewables_by_state.iloc[:,:3].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>offshoreWind_GWh</th>\n",
       "      <th>offshoreWind_GW</th>\n",
       "      <th>offshoreWind_km2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>2662579.0</td>\n",
       "      <td>654.0</td>\n",
       "      <td>130966.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Colorado</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Connecticut</th>\n",
       "      <td>26545.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1434.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delaware</th>\n",
       "      <td>60654.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Florida</th>\n",
       "      <td>34684.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1929.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Georgia</th>\n",
       "      <td>220807.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>11725.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>2836735.0</td>\n",
       "      <td>736.0</td>\n",
       "      <td>147389.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idaho</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Illinois</th>\n",
       "      <td>66070.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3174.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indiana</th>\n",
       "      <td>165.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iowa</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kentucky</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      offshoreWind_GWh  offshoreWind_GW  offshoreWind_km2\n",
       "State                                                                    \n",
       "Arizona                            NaN              NaN               NaN\n",
       "Arkansas                           NaN              NaN               NaN\n",
       "California                   2662579.0            654.0          130966.0\n",
       "Colorado                           NaN              NaN               NaN\n",
       "Connecticut                    26545.0              7.0            1434.0\n",
       "Delaware                       60654.0             15.0            3007.0\n",
       "District of Columbia               NaN              NaN               NaN\n",
       "Florida                        34684.0              9.0            1929.0\n",
       "Georgia                       220807.0             58.0           11725.0\n",
       "Hawaii                       2836735.0            736.0          147389.0\n",
       "Idaho                              NaN              NaN               NaN\n",
       "Illinois                       66070.0             15.0            3174.0\n",
       "Indiana                          165.0              0.0               9.0\n",
       "Iowa                               NaN              NaN               NaN\n",
       "Kansas                             NaN              NaN               NaN\n",
       "Kentucky                           NaN              NaN               NaN"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 8 (1 point): For the 'renewables_by_state' DataFrame, display all states between\n",
    "#                       Arizona and Louisiana (inclusive) for variables 'offshoreWind_GWh',\n",
    "#                       'offshoreWind_GW' and 'offshoreWind_km2'.\n",
    "renewables_by_state.head()\n",
    "start_idx = renewables_by_state.index.get_loc('Arizona')\n",
    "end_idx = renewables_by_state.index.get_loc(\"Louisiana\")\n",
    "\n",
    "renewables_by_state.iloc[start_idx:end_idx,:].loc[:,['offshoreWind_GWh',\"offshoreWind_GW\",\"offshoreWind_km2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>offshoreWind_GWh</th>\n",
       "      <th>offshoreWind_GW</th>\n",
       "      <th>offshoreWind_km2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.898819e+05</td>\n",
       "      <td>203.777778</td>\n",
       "      <td>40861.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.173752e+06</td>\n",
       "      <td>299.004088</td>\n",
       "      <td>59845.117349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.650000e+02</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.468400e+04</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1929.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.607000e+04</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>3174.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.200698e+06</td>\n",
       "      <td>340.000000</td>\n",
       "      <td>68122.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.836735e+06</td>\n",
       "      <td>736.000000</td>\n",
       "      <td>147389.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       offshoreWind_GWh  offshoreWind_GW  offshoreWind_km2\n",
       "count      9.000000e+00         9.000000          9.000000\n",
       "mean       7.898819e+05       203.777778      40861.666667\n",
       "std        1.173752e+06       299.004088      59845.117349\n",
       "min        1.650000e+02         0.000000          9.000000\n",
       "25%        3.468400e+04         9.000000       1929.000000\n",
       "50%        6.607000e+04        15.000000       3174.000000\n",
       "75%        1.200698e+06       340.000000      68122.000000\n",
       "max        2.836735e+06       736.000000     147389.000000"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 9 (1 point): With a one line Python statement, describe the database in Question 8\n",
    "renewables_by_state.iloc[start_idx:end_idx+1,:].loc[:,['offshoreWind_GWh',\"offshoreWind_GW\",\"offshoreWind_km2\"]].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>offshoreWind_GWh</th>\n",
       "      <th>offshoreWind_GW</th>\n",
       "      <th>offshoreWind_km2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>100</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>100</td>\n",
       "      <td>654.0</td>\n",
       "      <td>130966.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Colorado</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Connecticut</th>\n",
       "      <td>100</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1434.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delaware</th>\n",
       "      <td>100</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Florida</th>\n",
       "      <td>100</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1929.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      offshoreWind_GWh  offshoreWind_GW  offshoreWind_km2\n",
       "State                                                                    \n",
       "Alabama                            100              0.0               0.0\n",
       "Alaska                             100              NaN               NaN\n",
       "Arizona                            100              NaN               NaN\n",
       "Arkansas                           100              NaN               NaN\n",
       "California                         100            654.0          130966.0\n",
       "Colorado                           100              NaN               NaN\n",
       "Connecticut                        100              7.0            1434.0\n",
       "Delaware                           100             15.0            3007.0\n",
       "District of Columbia               100              NaN               NaN\n",
       "Florida                            100              9.0            1929.0"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 10 (1 point): Set the entire column 'offshoreWind_GWh' of 'renewables_by_state'\n",
    "#                        to a constant value of 100, and print the first ten columns of variables \n",
    "#                        'offshoreWind_GWh','offshoreWind_GW' and 'offshoreWind_km2'.\n",
    "renewables_by_state.loc[:,\"offshoreWind_GWh\"] = 100\n",
    "renewables_by_state.loc[:,['offshoreWind_GWh','offshoreWind_GW' , 'offshoreWind_km2']].iloc[:10,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <font color=blue>Questions 11-15 for the djia\\_df DataFrame</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Description:\n",
    "The data is a time series of the closing prices of all 30 stocks in the Dow Jones Industrial Average from January 3, 2011 to August 3, 2018. The date is the index of the DataFrame, which qualifies it as a TimeSeries. The columns have the following format: '<ticker for a stock>_close'. For example 'aapl_close' was the New York Stock Exchange closing price for Apple. Although the close is redundant in this name, there are other columns, i.e. 'aapl_open', 'aapl_high' and 'aapl_low' that were eliminated from the original dataset. We will use this TimeSeries later in the course for other exercises."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47.081429"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 11 (1 point): Print the price of 'aapl_close' on the first day of djia_ts along with the date and dtype.\n",
    "#\n",
    "djia_ts.iloc[0,:].loc[\"aapl_close\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [utx_close, v_close, vz_close, wmt_close, xom_close]\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "# Question 12 (1 point): Create a new TimeSeries 'djia_ts1' with the last 5 columns of 'djia_ts', and \n",
    "#                        change the date index to 2018-08-06 - 2018-08-10. Display the first 5 rows and \n",
    "#                        5 columns of 'djia_ts1'.\n",
    "djia_ts1 = djia_ts[datetime(2018,8,6):datetime(2018,8,10)]\n",
    "# the time seires ends on 2018 8 3\n",
    "djia_ts1 = djia_ts1.iloc[:,-5:]\n",
    "print(djia_ts1.iloc[:5,:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aapl_close</th>\n",
       "      <th>axp_close</th>\n",
       "      <th>ba_close</th>\n",
       "      <th>cat_close</th>\n",
       "      <th>csco_close</th>\n",
       "      <th>cvx_close</th>\n",
       "      <th>dwdp_close</th>\n",
       "      <th>dis_close</th>\n",
       "      <th>ge_close</th>\n",
       "      <th>gs_close</th>\n",
       "      <th>...</th>\n",
       "      <th>nke_close</th>\n",
       "      <th>pfe_close</th>\n",
       "      <th>pg_close</th>\n",
       "      <th>trv_close</th>\n",
       "      <th>unh_close</th>\n",
       "      <th>utx_close</th>\n",
       "      <th>v_close</th>\n",
       "      <th>vz_close</th>\n",
       "      <th>wmt_close</th>\n",
       "      <th>xom_close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-07-30</th>\n",
       "      <td>190.979996</td>\n",
       "      <td>100.849998</td>\n",
       "      <td>351.059998</td>\n",
       "      <td>139.750000</td>\n",
       "      <td>42.169998</td>\n",
       "      <td>127.830002</td>\n",
       "      <td>68.050003</td>\n",
       "      <td>112.629997</td>\n",
       "      <td>13.16</td>\n",
       "      <td>238.949997</td>\n",
       "      <td>...</td>\n",
       "      <td>75.959999</td>\n",
       "      <td>38.590000</td>\n",
       "      <td>80.199997</td>\n",
       "      <td>131.100006</td>\n",
       "      <td>253.839996</td>\n",
       "      <td>133.100006</td>\n",
       "      <td>136.479996</td>\n",
       "      <td>52.490002</td>\n",
       "      <td>88.879997</td>\n",
       "      <td>81.739998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07-31</th>\n",
       "      <td>189.910004</td>\n",
       "      <td>99.519997</td>\n",
       "      <td>356.299988</td>\n",
       "      <td>143.800003</td>\n",
       "      <td>42.290001</td>\n",
       "      <td>126.269997</td>\n",
       "      <td>68.769997</td>\n",
       "      <td>113.559998</td>\n",
       "      <td>13.63</td>\n",
       "      <td>237.429993</td>\n",
       "      <td>...</td>\n",
       "      <td>76.910004</td>\n",
       "      <td>39.930000</td>\n",
       "      <td>80.879997</td>\n",
       "      <td>130.139999</td>\n",
       "      <td>253.220001</td>\n",
       "      <td>135.740005</td>\n",
       "      <td>136.740005</td>\n",
       "      <td>51.639999</td>\n",
       "      <td>89.230003</td>\n",
       "      <td>81.510002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-01</th>\n",
       "      <td>190.289993</td>\n",
       "      <td>99.449997</td>\n",
       "      <td>352.760010</td>\n",
       "      <td>138.539993</td>\n",
       "      <td>41.860001</td>\n",
       "      <td>125.389999</td>\n",
       "      <td>67.959999</td>\n",
       "      <td>112.970001</td>\n",
       "      <td>13.24</td>\n",
       "      <td>236.039993</td>\n",
       "      <td>...</td>\n",
       "      <td>77.540001</td>\n",
       "      <td>40.270000</td>\n",
       "      <td>80.650002</td>\n",
       "      <td>128.960007</td>\n",
       "      <td>253.369995</td>\n",
       "      <td>134.899994</td>\n",
       "      <td>138.250000</td>\n",
       "      <td>51.730000</td>\n",
       "      <td>88.239998</td>\n",
       "      <td>80.389999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-02</th>\n",
       "      <td>201.500000</td>\n",
       "      <td>99.730003</td>\n",
       "      <td>349.730011</td>\n",
       "      <td>138.009995</td>\n",
       "      <td>42.529999</td>\n",
       "      <td>123.760002</td>\n",
       "      <td>66.440002</td>\n",
       "      <td>112.750000</td>\n",
       "      <td>13.17</td>\n",
       "      <td>233.990005</td>\n",
       "      <td>...</td>\n",
       "      <td>78.650002</td>\n",
       "      <td>39.650002</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>128.330002</td>\n",
       "      <td>256.079987</td>\n",
       "      <td>134.119995</td>\n",
       "      <td>138.919998</td>\n",
       "      <td>51.980000</td>\n",
       "      <td>88.760002</td>\n",
       "      <td>79.910004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-03</th>\n",
       "      <td>207.389999</td>\n",
       "      <td>100.790001</td>\n",
       "      <td>348.440002</td>\n",
       "      <td>138.509995</td>\n",
       "      <td>42.830002</td>\n",
       "      <td>124.050003</td>\n",
       "      <td>66.820000</td>\n",
       "      <td>114.089996</td>\n",
       "      <td>13.14</td>\n",
       "      <td>234.089996</td>\n",
       "      <td>...</td>\n",
       "      <td>78.739998</td>\n",
       "      <td>40.540001</td>\n",
       "      <td>82.330002</td>\n",
       "      <td>129.699997</td>\n",
       "      <td>257.220001</td>\n",
       "      <td>133.889999</td>\n",
       "      <td>139.820007</td>\n",
       "      <td>52.270000</td>\n",
       "      <td>89.599998</td>\n",
       "      <td>80.199997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            aapl_close   axp_close    ba_close   cat_close  csco_close  \\\n",
       "date                                                                     \n",
       "2018-07-30  190.979996  100.849998  351.059998  139.750000   42.169998   \n",
       "2018-07-31  189.910004   99.519997  356.299988  143.800003   42.290001   \n",
       "2018-08-01  190.289993   99.449997  352.760010  138.539993   41.860001   \n",
       "2018-08-02  201.500000   99.730003  349.730011  138.009995   42.529999   \n",
       "2018-08-03  207.389999  100.790001  348.440002  138.509995   42.830002   \n",
       "\n",
       "             cvx_close  dwdp_close   dis_close  ge_close    gs_close  \\\n",
       "date                                                                   \n",
       "2018-07-30  127.830002   68.050003  112.629997     13.16  238.949997   \n",
       "2018-07-31  126.269997   68.769997  113.559998     13.63  237.429993   \n",
       "2018-08-01  125.389999   67.959999  112.970001     13.24  236.039993   \n",
       "2018-08-02  123.760002   66.440002  112.750000     13.17  233.990005   \n",
       "2018-08-03  124.050003   66.820000  114.089996     13.14  234.089996   \n",
       "\n",
       "              ...      nke_close  pfe_close   pg_close   trv_close  \\\n",
       "date          ...                                                    \n",
       "2018-07-30    ...      75.959999  38.590000  80.199997  131.100006   \n",
       "2018-07-31    ...      76.910004  39.930000  80.879997  130.139999   \n",
       "2018-08-01    ...      77.540001  40.270000  80.650002  128.960007   \n",
       "2018-08-02    ...      78.650002  39.650002  82.000000  128.330002   \n",
       "2018-08-03    ...      78.739998  40.540001  82.330002  129.699997   \n",
       "\n",
       "             unh_close   utx_close     v_close   vz_close  wmt_close  \\\n",
       "date                                                                   \n",
       "2018-07-30  253.839996  133.100006  136.479996  52.490002  88.879997   \n",
       "2018-07-31  253.220001  135.740005  136.740005  51.639999  89.230003   \n",
       "2018-08-01  253.369995  134.899994  138.250000  51.730000  88.239998   \n",
       "2018-08-02  256.079987  134.119995  138.919998  51.980000  88.760002   \n",
       "2018-08-03  257.220001  133.889999  139.820007  52.270000  89.599998   \n",
       "\n",
       "            xom_close  \n",
       "date                   \n",
       "2018-07-30  81.739998  \n",
       "2018-07-31  81.510002  \n",
       "2018-08-01  80.389999  \n",
       "2018-08-02  79.910004  \n",
       "2018-08-03  80.199997  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 13 (1 point): Append djia_ts1 to djia_ts in a single statement. Do not assign the result.\n",
    "#                        When you examine the tail of djia_ts using the command 'djia_ts.tail()' were the rows\n",
    "#                        of djia_ts1 appended? Explain.\n",
    "djia_ts.append(djia_ts1,sort=False)\n",
    "djia_ts.tail()\n",
    "# No. we do not se the rows from djia_ts1. this is because append function returns a new data frame. \n",
    "# the original data frame is not modified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aapl_close</th>\n",
       "      <th>axp_close</th>\n",
       "      <th>ba_close</th>\n",
       "      <th>cat_close</th>\n",
       "      <th>csco_close</th>\n",
       "      <th>cvx_close</th>\n",
       "      <th>dwdp_close</th>\n",
       "      <th>dis_close</th>\n",
       "      <th>ge_close</th>\n",
       "      <th>gs_close</th>\n",
       "      <th>...</th>\n",
       "      <th>pfe_close</th>\n",
       "      <th>pg_close</th>\n",
       "      <th>trv_close</th>\n",
       "      <th>unh_close</th>\n",
       "      <th>utx_close</th>\n",
       "      <th>v_close</th>\n",
       "      <th>vz_close</th>\n",
       "      <th>wmt_close</th>\n",
       "      <th>xom_close</th>\n",
       "      <th>b2018</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-03</th>\n",
       "      <td>47.081429</td>\n",
       "      <td>43.400002</td>\n",
       "      <td>66.400002</td>\n",
       "      <td>94.150002</td>\n",
       "      <td>20.490000</td>\n",
       "      <td>91.940002</td>\n",
       "      <td>34.980000</td>\n",
       "      <td>37.820000</td>\n",
       "      <td>18.280001</td>\n",
       "      <td>173.050003</td>\n",
       "      <td>...</td>\n",
       "      <td>17.680000</td>\n",
       "      <td>64.769997</td>\n",
       "      <td>55.820000</td>\n",
       "      <td>37.130001</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>17.629999</td>\n",
       "      <td>36.430000</td>\n",
       "      <td>54.560001</td>\n",
       "      <td>74.550003</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-04</th>\n",
       "      <td>47.327145</td>\n",
       "      <td>43.950001</td>\n",
       "      <td>66.940002</td>\n",
       "      <td>93.709999</td>\n",
       "      <td>20.520000</td>\n",
       "      <td>91.599998</td>\n",
       "      <td>34.740002</td>\n",
       "      <td>38.990002</td>\n",
       "      <td>18.610001</td>\n",
       "      <td>173.080002</td>\n",
       "      <td>...</td>\n",
       "      <td>17.990000</td>\n",
       "      <td>64.949997</td>\n",
       "      <td>55.570000</td>\n",
       "      <td>37.470001</td>\n",
       "      <td>79.120003</td>\n",
       "      <td>17.650000</td>\n",
       "      <td>37.160000</td>\n",
       "      <td>54.770000</td>\n",
       "      <td>74.900002</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-05</th>\n",
       "      <td>47.714287</td>\n",
       "      <td>45.040001</td>\n",
       "      <td>67.480003</td>\n",
       "      <td>94.519997</td>\n",
       "      <td>20.770000</td>\n",
       "      <td>91.440002</td>\n",
       "      <td>34.680000</td>\n",
       "      <td>39.959999</td>\n",
       "      <td>18.639999</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>18.110001</td>\n",
       "      <td>64.800003</td>\n",
       "      <td>55.240002</td>\n",
       "      <td>37.590000</td>\n",
       "      <td>79.230003</td>\n",
       "      <td>18.022499</td>\n",
       "      <td>37.669998</td>\n",
       "      <td>54.410000</td>\n",
       "      <td>74.699997</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-06</th>\n",
       "      <td>47.675713</td>\n",
       "      <td>44.730000</td>\n",
       "      <td>68.800003</td>\n",
       "      <td>93.540001</td>\n",
       "      <td>20.950001</td>\n",
       "      <td>90.690002</td>\n",
       "      <td>35.340000</td>\n",
       "      <td>39.650002</td>\n",
       "      <td>18.559999</td>\n",
       "      <td>172.210007</td>\n",
       "      <td>...</td>\n",
       "      <td>18.180000</td>\n",
       "      <td>64.690002</td>\n",
       "      <td>54.389999</td>\n",
       "      <td>38.369999</td>\n",
       "      <td>79.150002</td>\n",
       "      <td>18.292500</td>\n",
       "      <td>36.230000</td>\n",
       "      <td>53.959999</td>\n",
       "      <td>75.180000</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-07</th>\n",
       "      <td>48.017143</td>\n",
       "      <td>44.360001</td>\n",
       "      <td>69.379997</td>\n",
       "      <td>93.730003</td>\n",
       "      <td>20.969999</td>\n",
       "      <td>91.190002</td>\n",
       "      <td>34.930000</td>\n",
       "      <td>39.450001</td>\n",
       "      <td>18.430000</td>\n",
       "      <td>170.690002</td>\n",
       "      <td>...</td>\n",
       "      <td>18.340000</td>\n",
       "      <td>64.500000</td>\n",
       "      <td>53.330002</td>\n",
       "      <td>38.450001</td>\n",
       "      <td>79.080002</td>\n",
       "      <td>18.240000</td>\n",
       "      <td>35.930000</td>\n",
       "      <td>54.080002</td>\n",
       "      <td>75.589996</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            aapl_close  axp_close   ba_close  cat_close  csco_close  \\\n",
       "date                                                                  \n",
       "2011-01-03   47.081429  43.400002  66.400002  94.150002   20.490000   \n",
       "2011-01-04   47.327145  43.950001  66.940002  93.709999   20.520000   \n",
       "2011-01-05   47.714287  45.040001  67.480003  94.519997   20.770000   \n",
       "2011-01-06   47.675713  44.730000  68.800003  93.540001   20.950001   \n",
       "2011-01-07   48.017143  44.360001  69.379997  93.730003   20.969999   \n",
       "\n",
       "            cvx_close  dwdp_close  dis_close   ge_close    gs_close  ...    \\\n",
       "date                                                                 ...     \n",
       "2011-01-03  91.940002   34.980000  37.820000  18.280001  173.050003  ...     \n",
       "2011-01-04  91.599998   34.740002  38.990002  18.610001  173.080002  ...     \n",
       "2011-01-05  91.440002   34.680000  39.959999  18.639999  174.000000  ...     \n",
       "2011-01-06  90.690002   35.340000  39.650002  18.559999  172.210007  ...     \n",
       "2011-01-07  91.190002   34.930000  39.450001  18.430000  170.690002  ...     \n",
       "\n",
       "            pfe_close   pg_close  trv_close  unh_close  utx_close    v_close  \\\n",
       "date                                                                           \n",
       "2011-01-03  17.680000  64.769997  55.820000  37.130001  78.989998  17.629999   \n",
       "2011-01-04  17.990000  64.949997  55.570000  37.470001  79.120003  17.650000   \n",
       "2011-01-05  18.110001  64.800003  55.240002  37.590000  79.230003  18.022499   \n",
       "2011-01-06  18.180000  64.690002  54.389999  38.369999  79.150002  18.292500   \n",
       "2011-01-07  18.340000  64.500000  53.330002  38.450001  79.080002  18.240000   \n",
       "\n",
       "             vz_close  wmt_close  xom_close  b2018  \n",
       "date                                                \n",
       "2011-01-03  36.430000  54.560001  74.550003  False  \n",
       "2011-01-04  37.160000  54.770000  74.900002  False  \n",
       "2011-01-05  37.669998  54.410000  74.699997  False  \n",
       "2011-01-06  36.230000  53.959999  75.180000  False  \n",
       "2011-01-07  35.930000  54.080002  75.589996  False  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 14 (1 point): Using dates in TimeSeries djia_ts, create a boolean variable 'b2018' that is true for\n",
    "#                        all dates in the year 2018 and false for all other dates. Hint: Use the .year attribute \n",
    "#                        of the index or use a comparison with the first day of 2018  \n",
    "bool_var = djia_ts.index.year.map(lambda x: x==2018)\n",
    "djia_ts['b2018'] = pd.Series(bool_var, index=djia_ts.index)\n",
    "djia_ts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aapl_close</th>\n",
       "      <th>axp_close</th>\n",
       "      <th>ba_close</th>\n",
       "      <th>cat_close</th>\n",
       "      <th>csco_close</th>\n",
       "      <th>cvx_close</th>\n",
       "      <th>dwdp_close</th>\n",
       "      <th>dis_close</th>\n",
       "      <th>ge_close</th>\n",
       "      <th>gs_close</th>\n",
       "      <th>...</th>\n",
       "      <th>pfe_close</th>\n",
       "      <th>pg_close</th>\n",
       "      <th>trv_close</th>\n",
       "      <th>unh_close</th>\n",
       "      <th>utx_close</th>\n",
       "      <th>v_close</th>\n",
       "      <th>vz_close</th>\n",
       "      <th>wmt_close</th>\n",
       "      <th>xom_close</th>\n",
       "      <th>b2018</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>169.229996</td>\n",
       "      <td>98.940002</td>\n",
       "      <td>296.839996</td>\n",
       "      <td>157.039993</td>\n",
       "      <td>38.860001</td>\n",
       "      <td>127.580002</td>\n",
       "      <td>71.900002</td>\n",
       "      <td>111.800003</td>\n",
       "      <td>17.980000</td>\n",
       "      <td>255.669998</td>\n",
       "      <td>...</td>\n",
       "      <td>36.439999</td>\n",
       "      <td>90.650002</td>\n",
       "      <td>131.979996</td>\n",
       "      <td>221.160004</td>\n",
       "      <td>128.160004</td>\n",
       "      <td>114.510002</td>\n",
       "      <td>53.529999</td>\n",
       "      <td>98.589996</td>\n",
       "      <td>85.029999</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>172.259995</td>\n",
       "      <td>99.550003</td>\n",
       "      <td>297.799988</td>\n",
       "      <td>157.279999</td>\n",
       "      <td>39.169998</td>\n",
       "      <td>128.509995</td>\n",
       "      <td>73.050003</td>\n",
       "      <td>112.279999</td>\n",
       "      <td>18.150000</td>\n",
       "      <td>253.289993</td>\n",
       "      <td>...</td>\n",
       "      <td>36.709999</td>\n",
       "      <td>90.540001</td>\n",
       "      <td>132.399994</td>\n",
       "      <td>223.479996</td>\n",
       "      <td>130.039993</td>\n",
       "      <td>115.650002</td>\n",
       "      <td>52.430000</td>\n",
       "      <td>99.449997</td>\n",
       "      <td>86.699997</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>172.229996</td>\n",
       "      <td>100.849998</td>\n",
       "      <td>296.670013</td>\n",
       "      <td>159.440002</td>\n",
       "      <td>38.990002</td>\n",
       "      <td>128.110001</td>\n",
       "      <td>74.449997</td>\n",
       "      <td>112.230003</td>\n",
       "      <td>18.530001</td>\n",
       "      <td>256.829987</td>\n",
       "      <td>...</td>\n",
       "      <td>36.790001</td>\n",
       "      <td>91.180000</td>\n",
       "      <td>132.399994</td>\n",
       "      <td>224.449997</td>\n",
       "      <td>130.449997</td>\n",
       "      <td>116.080002</td>\n",
       "      <td>52.599998</td>\n",
       "      <td>99.540001</td>\n",
       "      <td>86.820000</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>173.029999</td>\n",
       "      <td>101.080002</td>\n",
       "      <td>308.839996</td>\n",
       "      <td>161.960007</td>\n",
       "      <td>39.529999</td>\n",
       "      <td>127.900002</td>\n",
       "      <td>75.419998</td>\n",
       "      <td>111.620003</td>\n",
       "      <td>18.540001</td>\n",
       "      <td>255.520004</td>\n",
       "      <td>...</td>\n",
       "      <td>36.860001</td>\n",
       "      <td>91.239998</td>\n",
       "      <td>132.160004</td>\n",
       "      <td>228.729996</td>\n",
       "      <td>131.570007</td>\n",
       "      <td>118.860001</td>\n",
       "      <td>52.480000</td>\n",
       "      <td>100.129997</td>\n",
       "      <td>86.750000</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>175.000000</td>\n",
       "      <td>100.150002</td>\n",
       "      <td>310.149994</td>\n",
       "      <td>166.029999</td>\n",
       "      <td>39.939999</td>\n",
       "      <td>128.529999</td>\n",
       "      <td>75.160004</td>\n",
       "      <td>110.019997</td>\n",
       "      <td>18.280001</td>\n",
       "      <td>251.809998</td>\n",
       "      <td>...</td>\n",
       "      <td>36.450001</td>\n",
       "      <td>91.720001</td>\n",
       "      <td>131.449997</td>\n",
       "      <td>224.759995</td>\n",
       "      <td>132.820007</td>\n",
       "      <td>119.339996</td>\n",
       "      <td>52.389999</td>\n",
       "      <td>101.610001</td>\n",
       "      <td>87.139999</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            aapl_close   axp_close    ba_close   cat_close  csco_close  \\\n",
       "date                                                                     \n",
       "2018-01-02  169.229996   98.940002  296.839996  157.039993   38.860001   \n",
       "2018-01-03  172.259995   99.550003  297.799988  157.279999   39.169998   \n",
       "2018-01-04  172.229996  100.849998  296.670013  159.440002   38.990002   \n",
       "2018-01-05  173.029999  101.080002  308.839996  161.960007   39.529999   \n",
       "2018-01-08  175.000000  100.150002  310.149994  166.029999   39.939999   \n",
       "\n",
       "             cvx_close  dwdp_close   dis_close   ge_close    gs_close  ...    \\\n",
       "date                                                                   ...     \n",
       "2018-01-02  127.580002   71.900002  111.800003  17.980000  255.669998  ...     \n",
       "2018-01-03  128.509995   73.050003  112.279999  18.150000  253.289993  ...     \n",
       "2018-01-04  128.110001   74.449997  112.230003  18.530001  256.829987  ...     \n",
       "2018-01-05  127.900002   75.419998  111.620003  18.540001  255.520004  ...     \n",
       "2018-01-08  128.529999   75.160004  110.019997  18.280001  251.809998  ...     \n",
       "\n",
       "            pfe_close   pg_close   trv_close   unh_close   utx_close  \\\n",
       "date                                                                   \n",
       "2018-01-02  36.439999  90.650002  131.979996  221.160004  128.160004   \n",
       "2018-01-03  36.709999  90.540001  132.399994  223.479996  130.039993   \n",
       "2018-01-04  36.790001  91.180000  132.399994  224.449997  130.449997   \n",
       "2018-01-05  36.860001  91.239998  132.160004  228.729996  131.570007   \n",
       "2018-01-08  36.450001  91.720001  131.449997  224.759995  132.820007   \n",
       "\n",
       "               v_close   vz_close   wmt_close  xom_close  b2018  \n",
       "date                                                             \n",
       "2018-01-02  114.510002  53.529999   98.589996  85.029999   True  \n",
       "2018-01-03  115.650002  52.430000   99.449997  86.699997   True  \n",
       "2018-01-04  116.080002  52.599998   99.540001  86.820000   True  \n",
       "2018-01-05  118.860001  52.480000  100.129997  86.750000   True  \n",
       "2018-01-08  119.339996  52.389999  101.610001  87.139999   True  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 15 (1 point): Subset the 'djia_ts' by applying 'bool2018'. and display the first 5 days.\n",
    "djia_ts.loc[djia_ts['b2018'] == True].iloc[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
